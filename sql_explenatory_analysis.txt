-- 1) Data Exploration:

-- Customer happiness cohorts is the main table containing the resuilt for each cohort 
-- there are 291 cohorts. There are 2 types, job_poster and tradesman
SELECT * FROM customer_happiness_cohorts
WHERE id = 208
;

SELECT type, COUNT(*) FROM customer_happiness_cohorts
GROUP BY type
;

-- customer happiness questions is the rating given by each user in each cohort
-- it links to the above via id = cohort_id. It also contains the requested at, answered at and rejected at. 
SELECT COUNT(*) FROM customer_happiness_questions
;

SELECT * FROM customer_happiness_questions
WHERE cohort_id = 208
;

SELECT cohort_id, COUNT(user_id) FROM customer_happiness_questions
GROUP BY cohort_id ORDER BY cohort_id
;

-- looking at trendsmen cohorts growth over time.
SELECT t.cohort_id, COUNT(t.user_id) 
	FROM (
	SELECT * FROM customer_happiness_questions
	WHERE cohort_id IN (
	SELECT cohort_id FROM customer_happiness_cohorts WHERE type = 'tradesman'
	)
	) t
GROUP BY t.cohort_id 
ORDER BY t.cohort_id
;
-- NOte: cohort 138 had an anusually high number of tradesman.

-- Below two tables are activity data on tradesman

-- This contains 492k feedbacks on tradesman. Feedback can be -1, 0 or 1 corresponding to negative, neutral and positive.
SELECT *
FROM tradesmen_feedback
LIMIT 100;

SELECT COUNT(*), rating_text, MAX(feedback_rating) as feedback_rating
FROM tradesmen_feedback
GROUP BY rating_text
;

-- This table records the "last interest expressed at" for each tradesman and the corresponding rating. We can use this table to highlight a correlation between latest activity and ??
SELECT * FROM tradesmen_last_interest
LIMIT 100
;

SELECT COUNT(user_id), COUNT(DISTINCT user_id) FROM tradesmen_last_interest;

-- Below demogrpahics data on tradesman

-- This table records the tradesman trades. This table contains multiple wentries for each treadsmen.
SELECT * FROM tradesmen_trades
LIMIT 10;

SELECT COUNT(*),COUNT( DISTINCT user_id) FROM tradesmen_trades
;

SELECT name, COUNT(*) FROM tradesmen_trades
GROUP BY name
;

-- This contains location and long lat for tradesman. We use this dimenstion to see if there is any particular pattern in the data that highlights a trend in a specific area and we could go as far as plotting on a map.
SELECT * FROM tradesman_locations
LIMIT 1
;

SELECT COUNT(DISTINCT user_id), COUNT(*) FROM tradesman_locations
;

SELECT county, COUNT(*) FROM tradesman_locations
GROUP BY county
;

-- 2) Exploring Seasonality:

-- Seasonality by month
WITH t AS 
	(
	SELECT 
	DATE_PART('month',end_of_period) as cohort_month, 
	DATE_PART('year',end_of_period) AS cohort_year, *
	FROM customer_happiness_cohorts
	WHERE type = 'tradesman'
	) 
SELECT cohort_month, AVG(net_promoter_score) as monthly_average_score 
FROM t
GROUP BY cohort_month
ORDER BY monthly_average_score 
;

-- Seasonality by year and month
WITH t AS 
	(
	SELECT 
	DATE_PART('month',end_of_period) as cohort_month, 
	DATE_PART('year',end_of_period) AS cohort_year, *
	FROM customer_happiness_cohorts
	WHERE type = 'tradesman'
	) 
SELECT cohort_year, cohort_month, AVG(net_promoter_score) as monthly_average_score 
FROM t
GROUP BY cohort_month, cohort_year
ORDER BY cohort_year, monthly_average_score DESC
;

-- Seasonality by year and quarter
WITH t AS 
	(
	SELECT 
	DATE_PART('quarter',end_of_period) as cohort_quarter, 
	DATE_PART('year',end_of_period) AS cohort_year,*
	FROM customer_happiness_cohorts
	WHERE type = 'tradesman'
	) 
SELECT cohort_year, cohort_quarter, AVG(net_promoter_score) as quarterly_average_score 
FROM t
GROUP BY cohort_year,cohort_quarter
ORDER BY quarterly_average_score DESC
;

-- ratio-to-moving average method using window function on year and quarter separate

WITH final_table AS (

		WITH mid_table AS 
			( 
			SELECT cohort_year, cohort_quarter, AVG(net_promoter_score) as quarterly_average_score 
			FROM 
				(SELECT 
				DATE_PART('quarter',end_of_period) as cohort_quarter, 
				DATE_PART('year',end_of_period) AS cohort_year,*
				FROM customer_happiness_cohorts
				WHERE type = 'tradesman') t
			GROUP BY cohort_year,cohort_quarter
			ORDER BY quarterly_average_score DESC
			) 
			SELECT 
				cohort_year,cohort_quarter, 
				quarterly_average_score, 
				AVG(quarterly_average_score) OVER (order by cohort_year, cohort_quarter rows between 1 preceding and 2 following) as moving_average 
			FROM mid_table
			order by cohort_year, cohort_quarter asc
			)
SELECT 
	cohort_year,cohort_quarter, 
	quarterly_average_score/moving_average AS seasonal_index,
	quarterly_average_score,
	moving_average
FROM final_table
ORDER BY seasonal_index DESC
;


-- ratio-to-moving average method using window function on year and month separate

WITH final_table AS (

		WITH mid_table AS 
			( 
			SELECT cohort_year, cohort_month, AVG(net_promoter_score) as monthly_average_score 
			FROM 
				(SELECT 
				DATE_PART('month',end_of_period) as cohort_month, 
				DATE_PART('year',end_of_period) AS cohort_year,*
				FROM customer_happiness_cohorts
				WHERE type = 'tradesman') t
			GROUP BY cohort_year,cohort_month
			ORDER BY monthly_average_score DESC
			) 
			SELECT 
				cohort_year,cohort_month, 
				monthly_average_score, 
				AVG(monthly_average_score) OVER (order by cohort_year, cohort_month rows between 1 preceding and 2 following) as moving_average 
			FROM mid_table
			order by cohort_year, cohort_month asc
			)
SELECT 
	cohort_year,cohort_month, 
	monthly_average_score/moving_average AS seasonal_index,
	monthly_average_score,
	moving_average
FROM final_table
ORDER BY seasonal_index DESC
;


SELECT * 
FROM tradesmen_feedback
LIMIT 10

;



WITH ranked_users_table AS (
SELECT id, user_id, 
	CASE
		WHEN rating < 7 THEN 'Detractor'
		WHEN rating > 8 THEN 'Promoter'
		ELSE 'Passive'
	END as user_rank
FROM customer_happiness_questions
 ) SELECT 
 	user_rank, 
 	COUNT(DISTINCT rut.user_id) AS count_users,
 	tl.county
 	FROM ranked_users_table rut
 	JOIN tradesman_locations tl ON tl.user_id = rut.user_id
 	JOIN (
 		SELECT *, 
		RANK() OVER (order by pref_rank)
		FROM tradesmen_trades 
 		)tt ON tl.user_id = tt.user_id -- using only top ranked trade for simplicity
 	WHERE tt.rank = 1 
 	GROUP BY rut.user_rank, tl.county
 	ORDER BY count_users DESC
 ;
 -- this above has to be percentage of total not overall, as come counties are significntly bigger then others.
 
 
 WITH ranked_users_table AS (
SELECT id, user_id, 
	CASE
		WHEN rating < 7 THEN 'Detractor'
		WHEN rating > 8 THEN 'Promoter'
		ELSE 'Passive'
	END as user_rank
FROM customer_happiness_questions
 ) SELECT 
 	user_rank, 
 	COUNT(DISTINCT rut.user_id) AS count_users,
 	tl.county, tt.name
 	FROM ranked_users_table rut
 	JOIN tradesman_locations tl ON tl.user_id = rut.user_id
 	JOIN (
 		SELECT *, 
		RANK() OVER (order by pref_rank)
		FROM tradesmen_trades 
 		)tt ON tl.user_id = tt.user_id -- using only top ranked trade for simplicity
 	WHERE tt.rank = 1 
 	GROUP BY rut.user_rank, tl.county, tt.name
 	ORDER BY count_users DESC
 ;



 WITH ranked_users_table AS (
SELECT id, user_id, 
	CASE
		WHEN rating < 7 THEN 'Detractor'
		WHEN rating > 8 THEN 'Promoter'
		ELSE 'Passive'
	END as user_rank
FROM customer_happiness_questions
 ) SELECT 
 	user_rank, 
 	COUNT(DISTINCT rut.user_id) AS count_users,
 	tl.county, tt.name
 	FROM ranked_users_table rut
 	JOIN tradesman_locations tl ON tl.user_id = rut.user_id
 	JOIN (
 		SELECT *
		FROM tradesmen_trades 
		WHERE pref_rank = 1 
 		)tt ON tl.user_id = tt.user_id -- using only top ranked trade for simplicity
 	GROUP BY rut.user_rank, tl.county, tt.name
 	ORDER BY count_users DESC
 ;
   

 SELECT 
-- 	chq.*,
-- 	tl.county,
-- 	tt.*
	COUNT(*) as tot_users,
	COUNT(DISTINCT chq.user_id) as unique_users
 	FROM customer_happiness_questions chq
 	JOIN tradesman_locations tl ON tl.user_id = chq.user_id
 	JOIN (
 		SELECT *, 
		RANK() OVER (order by pref_rank)
		FROM tradesmen_trades 
 		)tt ON tl.user_id = tt.user_id -- using only top ranked trade for simplicity
 	WHERE tt.rank = 1 
 ;
 
 
  SELECT COUNT(*) FROM customer_happiness_questions
 ;
 

  SELECT COUNT(*) FROM tradesman_locations
 ;
  
   	SELECT *
		FROM tradesmen_trades 
		WHERE pref_rank = 1
		;

   	SELECT *
		FROM tradesmen_last_interest 
		;
				
		
		
WITH ranked_users_table AS (
SELECT id, user_id, 
 rating
FROM customer_happiness_questions
 ) SELECT 
 	rating, 
 	rut.user_id,
 	tl.county,
    tt.name as trade
 	FROM ranked_users_table rut
 	JOIN tradesman_locations tl ON tl.user_id = rut.user_id
 	JOIN (
 		SELECT *
		FROM tradesmen_trades 
		WHERE pref_rank = 1 
 		)tt ON tl.user_id = tt.user_id -- using only top ranked trade for simplicity
 ;
 
 -- this below shoudl be 28897 to have unique latest vote
 
 WITH latest_users_survey AS (
	SELECT customer_happiness_questions_id
		FROM (
		SELECT customer_happiness_questions_id, 
		ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY last_interest_expressed_at DESC) AS rn
		FROM tradesmen_last_interest
		) t
		WHERE rn = 1
		)
	SELECT 
	CASE
		WHEN chq.rating < 7 THEN 'Detractor'
		WHEN chq.rating > 8 THEN 'Promoter'
		ELSE 'Passive'
	END as user_type,
 	chq.user_id,
 	tl.county,
    tt.name as trade
 	FROM customer_happiness_questions chq
 	JOIN latest_users_survey lus ON chq.id = lus.customer_happiness_questions_id
 	JOIN tradesman_locations tl ON tl.user_id = chq.user_id
 	JOIN (
 		SELECT *
		FROM tradesmen_trades 
		WHERE pref_rank = 1 
 		)tt ON tl.user_id = tt.user_id -- using only top ranked trade for simplicity
 ;
 